code optimization:
def evaluate_expression(expr, variables):
    try:
        for var, value in variables.items():
            expr = expr.replace(var, str(value))
        return str(eval(expr))
    except Exception:
        return expr  

def optimize_c_code(c_code):
    variables = {}  
    declarations = {}  
    optimized_lines = []
    inside_function = False  
    for line in c_code.splitlines():
        stripped_line = line.strip()
        if "{" in stripped_line and "void main" in stripped_line:
            inside_function = True
            optimized_lines.append(line)
            continue
        if "}" in stripped_line and inside_function:
            inside_function = False
            for decl in declarations.values():
                optimized_lines.append(decl)
            declarations.clear()  
            optimized_lines.append(line)
            continue
        if inside_function:
            if stripped_line.startswith("int ") and "=" in stripped_line and ";" in stripped_line:
                var_declaration = stripped_line.split(";")[0]  
                var, expr = var_declaration.split("=", 1) 
                var = var.replace("int", "").strip() 
                expr = expr.strip()  
                optimized_expr = evaluate_expression(expr, variables)
                variables[var] = int(optimized_expr) 
                declarations[var] = f"int {var} = {optimized_expr};"  
                continue  
            elif "=" in stripped_line and ";" in stripped_line:
                before_semi = stripped_line.split(";")[0] 
                var, expr = before_semi.split("=", 1) 
                var = var.strip()
                expr = expr.strip()
                optimized_expr = evaluate_expression(expr, variables)
                if var in variables:  
                    declarations[var] = f"int {var} = {optimized_expr};"
                variables[var] = int(optimized_expr)  
                continue  
        
        optimized_lines.append(line)

    return "\n".join(optimized_lines)

print("Enter your C code (end input with an empty line):")
user_code_lines = []
while True:
    line = input()
    if line.strip() == "":  
        break
    user_code_lines.append(line)

user_c_code = "\n".join(user_code_lines)
optimized_code = optimize_c_code(user_c_code)
print("\nOptimized C Code:")
print(optimized_code)










8086 assembly language code
print("Enter your three-address code (one line at a time).\nWhen you're done, enter an empty line:")
tac_lines = []
while True:
    line = input()
    if line.strip() == "":
        break
    tac_lines.append(line)

assembly_code = []
register_map = {}
current_register = 1

def get_next_register():
    global current_register
    reg = "R"+str(current_register)
    current_register += 1
    return reg

for line in tac_lines:
    parts = line.split("=")
    target = parts[0].strip()
    expression = parts[1].strip()
    if "+" in expression:
        operands = expression.split("+")
        op1, op2 = operands[0].strip(), operands[1].strip()
        reg1 = register_map.get(op1, get_next_register())
        if op1 not in register_map:
            assembly_code.append("LD "+reg1+" "+op1)
            register_map[op1] = reg1
        reg2 = register_map.get(op2, get_next_register())
        if op2 not in register_map:
            assembly_code.append("LD "+reg2+" "+op2)
            register_map[op2] = reg2
        reg_result = get_next_register()
        assembly_code.append("ADD "+reg_result+" "+reg1+" "+reg2)
        assembly_code.append("ST "+target+" "+reg_result)
        register_map[target] = reg_result
    else:
        reg = get_next_register()
        assembly_code.append("LD "+reg+" "+expression)
        assembly_code.append("ST "+target+" "+reg)
        register_map[target] = reg
print("\nGenerated Assembly Code:")

for line in assembly_code:
    print(line)




















THREE ADDRESS CODE GENERATOR    
print("Enter an arithmetic expression (with or without assignment):")
expression = input().strip()
tac = []
temp_counter = 1  
def get_temp():
    global temp_counter
    temp = f"t{temp_counter}"
    temp_counter += 1
    return temp

def parse_expression(expr):
    if "(" in expr:
        open_paren = expr.rfind("(")
        close_paren = expr.find(")", open_paren)
        inner_expr = expr[open_paren + 1:close_paren]
        temp_var = parse_expression(inner_expr)
        expr = expr[:open_paren] + temp_var + expr[close_paren + 1:]
        return parse_expression(expr)
    for op in ["+", "-", "*", "/"]:
        if op in expr:
            left, right = expr.split(op, 1)
            left = left.strip()
            right = right.strip()
            temp_var_left = parse_expression(left) if any(c in left for c in "+-*/") else left
            temp_var_right = parse_expression(right) if any(c in right for c in "+-*/") else right
            temp_var = get_temp()
            tac.append(temp_var+" = "+temp_var_left+" "+op+" "+temp_var_right)
            return temp_var
    return expr.strip()
if "=" in expression:
    target, expr = expression.split("=", 1)
    target = target.strip()
    expr = expr.strip()
    result_var = parse_expression(expr)
    tac.append(f"{target} = {result_var}")
else:
    parse_expression(expression)

print("\nThree-Address Code:")
for line in tac:
    print(line)


















CONTROL STRUCTURE RECOGNISER     
YACC CODE :
%{
#include<stdio.h>
int yylex();
%}

%token IF ELSE WHILE FOR SWITCH CASE DEFAULT OPEN_BRACE CLOSE_BRACE SEMICOLON COLON OPEN_BRACKET CLOSE_BRACKET BREAK

%%
program: statement
| program statement
;

statement:if_statement
|while_loop
|switch_case_statement
|for_loop
;

if_statement:IF OPEN_BRACKET expression_opt CLOSE_BRACKET OPEN_BRACE
expression_opt CLOSE_BRACE ELSE OPEN_BRACE expression_opt CLOSE_BRACE
{
printf("Recognized IF Else statement\n");
}
;
while_loop:WHILE OPEN_BRACKET expression_opt CLOSE_BRACKET OPEN_BRACE
expression_opt CLOSE_BRACE
{
printf("Recognized WHILE loop\n");
}
;
switch_case_statement:SWITCH OPEN_BRACKET expression_opt CLOSE_BRACKET
OPEN_BRACE case_list CLOSE_BRACE
{
printf("Recognized SWITCH_CASE statement with DEFAULT\n");
}
;
for_loop:FOR OPEN_BRACKET expression_opt SEMICOLON expression_opt
CLOSE_BRACKET OPEN_BRACE expression_opt CLOSE_BRACE
{
printf("Recognized FOR loop\n");
}
;
case_list:CASE expression COLON expression BREAK
SEMICOLON DEFAULT COLON expression_opt
;

expression_opt:/*empty*/
|expression
|expression SEMICOLON
;
expression:
;
%%

int yyerror(const char *s){
fprintf(stderr,"Error=%s\n", s);
return 1;
}

int main() {
printf("\nEnter control structure:");
yyparse();
return 0;
}


LEX CODE:
%{
#include "y.tab.h"
#include <stdio.h>
#include <stdlib.h>
%}

%%
"if" { return IF; }
"else" { return ELSE; }
"while" { return WHILE; }
"for" { return FOR; }
"switch" { return SWITCH; }
"case" { return CASE; }
"default" { return DEFAULT; }
"break" { return BREAK; }
"(" { return OPEN_BRACKET; }
")" { return CLOSE_BRACKET; }
"{" { return OPEN_BRACE; }
"}" { return CLOSE_BRACE; }
";" { return SEMICOLON; }
[\t\n] ;
. ;
%%

int yywrap() {  return 1;  }

