ex3git init
git config --global --user.name "ssuruthi560"
git config --global --user.email "suruthi.26csb@licet.ac.in"
git config --global --list
git add "first.txt"
git add first.txt
git commit -m "issue2"
git status
git log
git branch -m main
git remote add origin "https://github.com/ssuruthi560/demo24.git"
git push -m origin "branch name"
git checkout -b "new branch name"
git switch -c "new branch name"
git checkout "branch name"
git switch "branch name"
git pull origin "branch name"
git merge "source branch name"
git tag "tag name"
git tag -a "tag name" -m "message"
git push origin tag name
git merge <source_branch>




ex4
choco install maven
mvn archetype:generate -DgroupId=com.example -DartifactId=myproject -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
mvn clean install -DskipTests
mvn spring-boot:run
mvn compile
mvn test
mvn package
mvn install
mvn clean
mvn dependency:tree



ex4
gradle init
gradle build
gradle build -x test
gradle run
gradle bootRun

gradle tasks
gradle clean
gradle compileJava
gradle test
gradle assemble
gradle dependencies






ex8 ansible
1. Ansible Installation

sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install ansible

üîÅ If not in sudoers list:

su
sudo usermod -aG sudo "username"
su "username"

‚úÖ 2. Verify Ansible Installation

ansible --version

üîÅ Fix UTF-8 Encoding Issue:

sudo nano /etc/default/locale

Edit content:

LANG="en_US.UTF-8"
LC_CTYPE="en_US.UTF-8"

Or run:

sudo update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8

‚úÖ 3. Create SSH Key

ssh-keygen -t rsa -C "kabilantm default"
ls -la .ssh
cat .ssh/id_rsa.pub
cat .ssh/id_rsa

‚úÖ 4. Copy SSH Key to Server

ssh-copy-id -i ~/.ssh/id_rsa.pub "ipaddress"

‚úÖ 5. Test SSH Key

ssh -i ~/.ssh/"keyname" "ipaddress"

üîÅ Fix Connection Refused (port 22):

sudo apt install openssh-server
sudo systemctl restart sshd

‚úÖ 6. Connect to Server

ssh "ipaddress"

‚úÖ 7. Create Inventory File

sudo nano inventory

Content:

[web]
192.168.1.7 ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_user=kabilan

‚úÖ 8. Test Ansible Connection

ansible all --key-file ~/.ssh/id_rsa -i inventory -m ping

üîÅ Fix permission denied error:

chmod 600 ~/.ssh/id_rsa

Alternative inventory test:

ansible all -i inventory -m ping

‚úÖ 9. Create & Run Playbook

Create:

nano playbook.yml

Example content:

---
- name: Test playbook
  hosts: web
  tasks:
    - name: Ping the server
      ping:

Run:

ansible-playbook -i inventory playbook.yml








ansible playbook
‚úÖ 1. Verify Ansible Installation and Connection

ansible --version
ansible all -i inventory -m ping

‚úÖ 2. Create Inventory File

sudo nano inventory

Content:

[web]
127.0.0.1 ansible_connection=local

‚úÖ 3. Create Ansible Playbook File

nano web_setup.yml

Content of web_setup.yml:

---
- name: Setup simple web server
  hosts: web
  become: yes
  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install Apache web server
      apt:
        name: apache2
        state: present

    - name: Start and enable Apache
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Create a simple index.html
      copy:
        dest: /var/www/html/index.html
        content: "<h1>Hello from Ansible Web Server</h1>"

‚úÖ 4. Run the Playbook

ansible-playbook -i inventory web_setup.yml

‚úÖ 5. Verify the Web Server

Open your browser and go to:

http://localhost










azure ansable 
Step 1: No code (Azure VM setup via GUI)

Launch a VM from https://portal.azure.com
‚úÖ Step 2: Connect to VM and Install Jenkins

Install Java (Pre-requisite):

sudo apt update
sudo apt install openjdk-17-jre

Install Jenkins:

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update
sudo apt-get install jenkins

‚úÖ Step 3: Access Jenkins

Go to this URL in your browser:

http://<VM-public-ip>:8080

‚úÖ Step 4: Unlock Jenkins

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Paste the output in the Jenkins web interface to unlock.
‚úÖ Step 5‚Äì7: Jenkins Web UI steps

These steps are done inside the Jenkins interface:

    Click New Item ‚Üí Enter job name ‚Üí Select Freestyle project

    In Build Steps, select Execute Shell and input any shell script, e.g.:

echo "Hello from Jenkins!"

    Click Save

    Click Build Now

    Click on the build number ‚Üí Console Output to see result










‚úÖ 1. pom.xml (Spring Boot 3.2+, Java 21)

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>library-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <name>Library App</name>

    <properties>
        <java.version>21</java.version>
        <spring.boot.version>3.2.4</spring.boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- H2 In-memory database -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok (Optional) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>

‚úÖ 2. Application Structure

src/
‚îî‚îÄ‚îÄ main/
    ‚îú‚îÄ‚îÄ java/
    ‚îÇ   ‚îî‚îÄ‚îÄ com/example/library/
    ‚îÇ       ‚îú‚îÄ‚îÄ LibraryApplication.java
    ‚îÇ       ‚îú‚îÄ‚îÄ controller/
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ BookController.java
    ‚îÇ       ‚îú‚îÄ‚îÄ model/
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ Book.java
    ‚îÇ       ‚îî‚îÄ‚îÄ repository/
    ‚îÇ           ‚îî‚îÄ‚îÄ BookRepository.java
    ‚îî‚îÄ‚îÄ resources/
        ‚îî‚îÄ‚îÄ application.properties

‚úÖ 3. Code Files
LibraryApplication.java

package com.example.library;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LibraryApplication {
    public static void main(String[] args) {
        SpringApplication.run(LibraryApplication.class, args);
    }
}

model/Book.java

package com.example.library.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;
    private String isbn;
}

repository/BookRepository.java

package com.example.library.repository;

import com.example.library.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}

controller/BookController.java

package com.example.library.controller;

import com.example.library.model.Book;
import com.example.library.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/books")
public class BookController {
    @Autowired
    private BookRepository bookRepository;

    @PostMapping
    public Book addBook(@RequestBody Book book) {
        return bookRepository.save(book);
    }

    @GetMapping
    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    @GetMapping("/{id}")
    public Book getBook(@PathVariable Long id) {
        return bookRepository.findById(id).orElse(null);
    }
}

application.properties

spring.datasource.url=jdbc:h2:mem:librarydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update

‚úÖ 4. Run the Application

mvn spring-boot:run

üì¶ API Endpoints

    POST /books ‚Äî Add a book (JSON body)

    GET /books ‚Äî List all books

    GET /books/{id} ‚Äî Get book by ID

    H2 console: http://localhost:8080/h2-console

