
Azure:
2) Cost model:
- Type custom deployment
- Select a template
- Under quick start template type: create-budget-simple
- select template
- Provide the following values
- Subscription, region, budget name, time grain, amount, start date, end date ,
threshold and contact mails
- Click review and create


3) Alerts:
- Type alerts
- Select monitor-> alerts
- Click create-> alert rule
- Under scope , select resource type, region, subscription
- Under condition, select signal type
- Select action grp or create one
- Under project details , give resource grp name and subscription
- Under alert rule details , give severity level, alert rule name, alert rule description
- Give name and value under tags
- Finally give review + create


4) Billing Alerts
- Type budgets in search bar
- Click select scope
- Give budget amt, alert conditions, email id for notification
- Click review and create


AWS:
2) cost model:
- Open aws s3 bucket
- Refer video .. he he..
- ok
- For this till uploading html file is enough mam said to cse a
students yesterday they said.. But i did upto lambda function
creation and shared the video in mail . pls do check any doubts
ask.. ok
One sec will send

3) Alaram:
- Go to billing preference
- Cloud watch
- Create alarm
- Select matrix (billing -> tot esti ->usd )
- Threshold amt->3
- create topic -> new topic
- Name of alarm
-
GCP alert:
- Alerting
- Create policy
- Select metricse (GCP location)
- Configure trigger (Threshold 20) next
- Configure notification (channel email) select channel
Check box (notification in console)
- Duration 7 days
- Add label (key value )
- Security level (warning)
- Policy name (any)
- Success lmao


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Fitness App - Welcome</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(to right, #c9ffbf, #ffafbd);
            padding: 20px;
            color: #333;
        }

        h2 {
            text-align: center;
            margin-bottom: 20px;
        }

        .container {
            max-width: 600px;
            margin: auto;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .section {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin: 10px 0 5px;
        }

        input, select, button {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #aaa;
        }

        #goalProgress {
            width: 100%;
            height: 20px;
            background-color: #eee;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 5px;
        }

        #goalProgressBar {
            height: 100%;
            background-color: #76c7c0;
            width: 50%;
        }

        button {
            background-color: #28a745;
            color: white;
            border: none;
            margin-top: 10px;
            cursor: pointer;
        }

        button:hover {
            background-color: #218838;
        }

        .result {
            margin-top: 10px;
            font-weight: bold;
        }

        .logout {
            background-color: #dc3545;
        }

        .logout:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Welcome to Your Fitness Dashboard ðŸ’ª</h2>

        <div class="section">
            <h3>Workout Tracker</h3>
            <label for="workoutType">Workout Type</label>
            <select id="workoutType">
                <option value="Running">Running</option>
                <option value="Cycling">Cycling</option>
                <option value="Yoga">Yoga</option>
                <option value="Weights">Weights</option>
            </select>

            <label for="duration">Duration (mins) / Reps</label>
            <input type="number" id="duration" min="1" placeholder="Enter value">

            <button onclick="logWorkout()">Log Workout</button>
            <div id="workoutLog" class="result"></div>
        </div>

        <div class="section">
            <h3>BMI Calculator</h3>
            <label for="weight">Weight (kg)</label>
            <input type="number" id="weight" placeholder="Enter your weight">

            <label for="height">Height (cm)</label>
            <input type="number" id="height" placeholder="Enter your height">

            <button onclick="calculateBMI()">Calculate BMI</button>
            <div id="bmiResult" class="result"></div>
        </div>

        <div class="section">
            <h3>Daily Goal Progress</h3>
            <label>Goal Completion</label>
            <div id="goalProgress">
                <div id="goalProgressBar"></div>
            </div>
            <button onclick="updateProgress()">Update Progress</button>
        </div>

        <form th:action="@{/logout}" method="get">
            <button class="logout" type="submit">Logout</button>
        </form>
    </div>

    <script>
        function logWorkout() {
            const type = document.getElementById('workoutType').value;
            const value = document.getElementById('duration').value;
            const log = document.getElementById('workoutLog');

            if (value === "" || value <= 0) {
                log.textContent = "Please enter a valid number.";
                log.style.color = "red";
                return;
            }

            log.textContent = `âœ… You completed ${value} mins/reps of ${type}`;
            log.style.color = "green";
        }

        function calculateBMI() {
            const weight = parseFloat(document.getElementById('weight').value);
            const height = parseFloat(document.getElementById('height').value) / 100; 
            const result = document.getElementById('bmiResult');

            if (!weight || !height) {
                result.textContent = "Enter valid height and weight.";
                result.style.color = "red";
                return;
            }

            const bmi = (weight / (height * height)).toFixed(2);
            result.textContent = `ðŸ“Š Your BMI is ${bmi}`;
            result.style.color = "blue";
        }

        function updateProgress() {
            const progressBar = document.getElementById('goalProgressBar');
            const currentWidth = parseInt(progressBar.style.width);
            const newWidth = Math.min(currentWidth + 10, 100);
            progressBar.style.width = newWidth + '%';
        }
    </script>
</body>
</html>

import json

def lambda_handler(event, context):
    first_name = event.get('firstName', '')  # Default to empty string if missing
    last_name = event.get('lastName', '')    # Default to empty string if missing
    name = f"{first_name} {last_name}".strip()
    
    return {
        'statusCode': 200,
        'body': json.dumps(f"Hello from lambda, {name}")
    }


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
    ]
}





public class Table {

    public static void main(String[] args) {
        String[][] tableData = {
                {"Username", "Password"},
                {"Alice", "helene@123"},
                {"Bob", "bob@123"},
                {"Charlie", "char@231"}
        };

        // Calculate maximum width for each column
        int[] columnWidths = new int[tableData[0].length];
        for (String[] row : tableData) {
            for (int i = 0; i < row.length; i++) {
                columnWidths[i] = Math.max(columnWidths[i], row[i].length());
            }
        }

        // Print table with separator between columns
        for (int i = 0; i < tableData.length; i++) {
            // Print each row with proper formatting, separating the username and password
            if (i == 0) {
                // Header row with separator line between columns
                System.out.printf("%-" + (columnWidths[0] + 2) + "s | %-" + (columnWidths[1] + 2) + "s\n",
                        tableData[i][0], tableData[i][1]);
                // Print separator line between columns
                for (int j = 0; j < columnWidths[0] + 2; j++) {
                    System.out.print("-");
                }
                System.out.print(" | ");
                for (int j = 0; j < columnWidths[1] + 2; j++) {
                    System.out.print("-");
                }
                System.out.println();
            } else {
                // Data rows with username and password
                System.out.printf("%-" + (columnWidths[0] + 2) + "s | %-" + (columnWidths[1] + 2) + "s\n",
                        tableData[i][0], tableData[i][1]);
            }
        }
    }
}






1. Passport Automation System
diff
Copy
Edit
Class: Applicant
- applicantID
- name
- address
- dob

Class: Passport
- passportID
- issueDate
- expiryDate
- applicantID

Class: Application
- applicationID
- status
- submissionDate

Class: Officer
- officerID
- name
- designation
Relationships:

Applicant applies for Application

Application is verified by Officer

Application results in Passport

2. Book Bank
diff
Copy
Edit
Class: Student
- studentID
- name
- course

Class: Book
- bookID
- title
- author
- isAvailable

Class: Transaction
- transactionID
- bookID
- studentID
- issueDate
- returnDate
Relationships:

Student borrows Book via Transaction

3. Exam Registration
diff
Copy
Edit
Class: Student
- studentID
- name
- department

Class: Subject
- subjectCode
- name
- credits

Class: Registration
- registrationID
- studentID
- subjectCode
- paymentStatus
Relationships:

Student registers for Subject via Registration

4. Stock Maintenance System
diff
Copy
Edit
Class: Product
- productID
- name
- quantity
- price

Class: Supplier
- supplierID
- name
- contactInfo

Class: Purchase
- purchaseID
- productID
- supplierID
- date
Relationships:

Product is supplied by Supplier

Purchase logs the transaction

5. Online Course Reservation System
diff
Copy
Edit
Class: User
- userID
- name
- email

Class: Course
- courseID
- title
- instructor

Class: Reservation
- reservationID
- courseID
- userID
- status
Relationships:

User reserves Course via Reservation

6. Airline/Railway Reservation System
diff
Copy
Edit
Class: Passenger
- passengerID
- name
- age

Class: Journey
- journeyID
- date
- origin
- destination

Class: Ticket
- ticketID
- passengerID
- journeyID
- seatNumber
Relationships:

Passenger books Ticket for a Journey

7. Software Personnel Management System
diff
Copy
Edit
Class: Employee
- employeeID
- name
- role

Class: Project
- projectID
- name
- deadline

Class: Assignment
- assignmentID
- employeeID
- projectID
- task
Relationships:

Employee works on Project via Assignment

8. Credit Card Processing
diff
Copy
Edit
Class: CardHolder
- holderID
- name
- cardNumber

Class: CreditCard
- cardNumber
- expiryDate
- limit

Class: Transaction
- transactionID
- amount
- date
- cardNumber
Relationships:

CardHolder owns CreditCard

CreditCard is used for Transaction

9. E-book Management System
diff
Copy
Edit
Class: User
- userID
- name
- email

Class: Ebook
- ebookID
- title
- author

Class: Download
- downloadID
- ebookID
- userID
- downloadDate
Relationships:

User downloads Ebook via Download

10. Recruitment System
diff
Copy
Edit
Class: Applicant
- applicantID
- name
- resume

Class: Job
- jobID
- title
- description

Class: Application
- applicationID
- applicantID
- jobID
- status
Relationships:

Applicant applies to Job via Application

11. Foreign Trading System
diff
Copy
Edit
Class: Trader
- traderID
- name
- country

Class: TradeOrder
- orderID
- product
- amount

Class: Shipment
- shipmentID
- orderID
- status
Relationships:

Trader creates TradeOrder

TradeOrder has Shipment

12. Conference Management System
diff
Copy
Edit
Class: Attendee
- attendeeID
- name
- organization

Class: Session
- sessionID
- topic
- speaker

Class: Registration
- registrationID
- sessionID
- attendeeID
Relationships:

Attendee registers for Session

13. BPO Management System
diff
Copy
Edit
Class: Agent
- agentID
- name
- shift

Class: Call
- callID
- duration
- customerName

Class: Performance
- performanceID
- agentID
- rating
Relationships:

Agent handles Call

Agent has Performance review

14. Library Management System
diff
Copy
Edit
Class: Member
- memberID
- name
- membershipType

Class: Book
- bookID
- title
- author

Class: Borrowing
- borrowingID
- memberID
- bookID
- dueDate
Relationships:

Member borrows Book via Borrowing

15. Student Information System
diff
Copy
Edit
Class: Student
- studentID
- name
- department

Class: Course
- courseID
- name
- credits

Class: Enrollment
- enrollmentID
- studentID
- courseID
- grade
Relationships:

Student enrolls in Course via Enrollment
