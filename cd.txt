https://github.com/Manimaran-M3/Demmo.git







1. Verify MySQL/MariaDB is running (Windows)
cmd
sc query MySQL
or for MariaDB:

cmd
sc query MariaDB
Look for "STATE" showing "RUNNING"

2. Start MySQL/MariaDB service if stopped
cmd
net start MySQL
or for MariaDB:

cmd
net start MariaDB
3. Check connection manually
cmd
mysql -u root -p
(Enter your password Password@123 when prompted)

spring connection 
4. Run Spring Boot application
cmd
mvnw.cmd spring-boot:run
Additional Windows-specific tips:
If services aren't found:

Check service names in Services Manager (services.msc)

Common service names:

MySQL: "MySQL80" or "MySQL57"

MariaDB: "MariaDB"

Alternative connection check:

cmd
mysqlshow -u root -p
Environment variables:
Ensure MySQL binaries are in your PATH:

cmd
set PATH=%PATH%;C:\Program Files\MySQL\MySQL Server 8.0\bin
(Adjust path to your MySQL/MariaDB installation)

If you get "mysql command not found":

Navigate to MySQL bin directory first:

cmd
cd "C:\Program Files\MySQL\MySQL Server 8.0\bin"
mysql -u root -p
For MariaDB installed via XAMPP/WAMP:

cmd
cd C:\xampp\mysql\bin
mysql.exe -u root -p















git init
touch README.md
git add README.md
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/RohitRai1141/dc1.git
git remote set-url origin https://github.com/RohitRai1141/dc1.git
git remote -v
git push -u origin main
git pull origin main --rebase
git push --force origin main
rm -rf .git


ex3git init
git config --global --user.name "ssuruthi560"
git config --global --user.email "suruthi.26csb@licet.ac.in"
git config --global --list
git add "first.txt"
git add first.txt
git commit -m "issue2"
git status
git log
git branch -m main
git remote add origin "https://github.com/ssuruthi560/demo24.git"
git push -m origin "branch name"
git checkout -b "new branch name"
git switch -c "new branch name"
git checkout "branch name"
git switch "branch name"
git pull origin "branch name"
git merge "source branch name"
git tag "tag name"
git tag -a "tag name" -m "message"
git push origin tag name
git merge <source_branch>




ex4
choco install maven
mvn archetype:generate -DgroupId=com.example -DartifactId=myproject -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
mvn clean install -DskipTests
mvn spring-boot:run
mvn compile
mvn test
mvn package
mvn install
mvn clean
mvn dependency:tree



ex4
gradle init
gradle build
gradle build -x test
gradle run
gradle bootRun

gradle tasks
gradle clean
gradle compileJava
gradle test
gradle assemble
gradle dependencies






ex8 ansible
1. Ansible Installation

sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install ansible

üîÅ If not in sudoers list:

su
sudo usermod -aG sudo "username"
su "username"

‚úÖ 2. Verify Ansible Installation

ansible --version

üîÅ Fix UTF-8 Encoding Issue:

sudo nano /etc/default/locale

Edit content:

LANG="en_US.UTF-8"
LC_CTYPE="en_US.UTF-8"

Or run:

sudo update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8

‚úÖ 3. Create SSH Key

ssh-keygen -t rsa -C "kabilantm default"
ls -la .ssh
cat .ssh/id_rsa.pub
cat .ssh/id_rsa

‚úÖ 4. Copy SSH Key to Server

ssh-copy-id -i ~/.ssh/id_rsa.pub "ipaddress"

‚úÖ 5. Test SSH Key

ssh -i ~/.ssh/"keyname" "ipaddress"

üîÅ Fix Connection Refused (port 22):

sudo apt install openssh-server
sudo systemctl restart sshd

‚úÖ 6. Connect to Server

ssh "ipaddress"

‚úÖ 7. Create Inventory File

sudo nano inventory

Content:

[web]
192.168.1.7 ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_user=kabilan

‚úÖ 8. Test Ansible Connection

ansible all --key-file ~/.ssh/id_rsa -i inventory -m ping

üîÅ Fix permission denied error:

chmod 600 ~/.ssh/id_rsa

Alternative inventory test:

ansible all -i inventory -m ping

‚úÖ 9. Create & Run Playbook

Create:

nano playbook.yml

Example content:

---
- name: Test playbook
  hosts: web
  tasks:
    - name: Ping the server
      ping:

Run:

ansible-playbook -i inventory playbook.yml








ansible playbook
‚úÖ 1. Verify Ansible Installation and Connection

ansible --version
ansible all -i inventory -m ping

‚úÖ 2. Create Inventory File

sudo nano inventory

Content:

[web]
127.0.0.1 ansible_connection=local

‚úÖ 3. Create Ansible Playbook File

nano web_setup.yml

Content of web_setup.yml:

---
- name: Setup simple web server
  hosts: web
  become: yes
  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install Apache web server
      apt:
        name: apache2
        state: present

    - name: Start and enable Apache
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Create a simple index.html
      copy:
        dest: /var/www/html/index.html
        content: "<h1>Hello from Ansible Web Server</h1>"

‚úÖ 4. Run the Playbook

ansible-playbook -i inventory web_setup.yml

‚úÖ 5. Verify the Web Server

Open your browser and go to:

http://localhost










azure ansable 
Step 1: No code (Azure VM setup via GUI)

Launch a VM from https://portal.azure.com
‚úÖ Step 2: Connect to VM and Install Jenkins

Install Java (Pre-requisite):

sudo apt update
sudo apt install openjdk-17-jre

Install Jenkins:

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update
sudo apt-get install jenkins

‚úÖ Step 3: Access Jenkins

Go to this URL in your browser:

http://<VM-public-ip>:8080

‚úÖ Step 4: Unlock Jenkins

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Paste the output in the Jenkins web interface to unlock.
‚úÖ Step 5‚Äì7: Jenkins Web UI steps

These steps are done inside the Jenkins interface:

    Click New Item ‚Üí Enter job name ‚Üí Select Freestyle project

    In Build Steps, select Execute Shell and input any shell script, e.g.:

echo "Hello from Jenkins!"

    Click Save

    Click Build Now

    Click on the build number ‚Üí Console Output to see result








