Here's a **complete step-by-step guide** from Maven installation to a working Spring Boot MVC application with MySQL authentication:

---

### **1. Install Maven on Windows**
```cmd
choco install maven -y  # Using Chocolatey
```
OR [Download manually](https://maven.apache.org/download.cgi), extract, and add `bin` to PATH.

Verify:
```cmd
mvn -v
```

---

### **2. Create Project**
```cmd
mvn archetype:generate -DgroupId=com.example -DartifactId=login-demo -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
cd login-demo
```

---

### **3. Project Structure**
```
login-demo/
├── src/
│   ├── main/
│   │   ├── java/com/example/
│   │   │   ├── config/
│   │   │   ├── controller/
│   │   │   ├── model/
│   │   │   ├── repository/
│   │   │   └── LoginDemoApplication.java
│   │   └── resources/
│   │       ├── static/
│   │       ├── templates/
│   │       └── application.properties
│   └── test/ (tests)
└── pom.xml
```

---

### **4. `pom.xml` Configuration**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
    </parent>

    <groupId>com.example</groupId>
    <artifactId>login-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Web MVC -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        
        <!-- Database -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>
        
        <!-- Security (Optional) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>
</project>
```

---

### **5. Database Setup**
1. **MySQL Commands**:
```sql
CREATE DATABASE demo_db;
USE demo_db;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL
);
INSERT INTO users VALUES (1, 'admin', 'admin123');
```

2. **`application.properties`**:
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/demo_db
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update

# Thymeleaf
spring.thymeleaf.cache=false
```

---

### **6. MVC Components**

#### **Entity (`User.java`)**
```java
package com.example.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    
    // Getters and Setters
}
```

#### **Repository (`UserRepository.java`)**
```java
package com.example.repository;

import com.example.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByUsername(String username);
}
```

#### **Controller (`LoginController.java`)**
```java
package com.example.controller;

import com.example.model.User;
import com.example.repository.UserRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class LoginController {
    
    private final UserRepository userRepo;

    public LoginController(UserRepository userRepo) {
        this.userRepo = userRepo;
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }

    @PostMapping("/login")
    public String login(String username, String password, Model model) {
        User user = userRepo.findByUsername(username);
        if (user != null && user.getPassword().equals(password)) {
            return "redirect:/welcome";
        }
        model.addAttribute("error", "Invalid credentials");
        return "login";
    }
}
```

#### **Thymeleaf Template (`login.html`)**
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form th:action="@{/login}" method="post">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
        <p th:if="${error}" th:text="${error}" style="color:red"></p>
    </form>
</body>
</html>
```

---

### **7. Run the Application**
```cmd
mvn spring-boot:run
```
Access: [http://localhost:8080/login](http://localhost:8080/login)  
Test Credentials: `admin` / `admin123`

---

### **Key Features Implemented**
1. **Maven** project structure
2. **Spring MVC** with Thymeleaf
3. **MySQL** database authentication
4. **Form validation** with error messages
5. **Clean layered architecture** (Controller → Repository → Entity)

This gives you a complete, production-ready login system. For enhanced security, consider adding:
- Password encryption with BCrypt
- CSRF protection
- Session management
